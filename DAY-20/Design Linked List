class MyLinkedList {
    private class Node {
        int val;
        Node prev, next;
        Node(int val) { this.val = val; }
    }

    private Node head, tail; 
    private int size;

    public MyLinkedList() {
        head = new Node(0);
        tail = new Node(0);
        head.next = tail;
        tail.prev = head;
        size = 0;
    }

    public int get(int index) {
        if (index < 0 || index >= size) return -1;
        Node cur;
        if (index < size / 2) {
            cur = head.next;
            for (int i = 0; i < index; i++) cur = cur.next;
        } else {
            cur = tail.prev;
            for (int i = size - 1; i > index; i--) cur = cur.prev;
        }
        return cur.val;
    }

    public void addAtHead(int val) {
        addAtIndex(0, val);
    }

    public void addAtTail(int val) {
        addAtIndex(size, val);
    }

    public void addAtIndex(int index, int val) {
        if (index < 0 || index > size) return;

        Node pred, succ;
        if (index < size / 2) {
            pred = head;
            for (int i = 0; i < index; i++) pred = pred.next;
            succ = pred.next;
        } else {
            succ = tail;
            for (int i = size; i > index; i--) succ = succ.prev;
            pred = succ.prev;
        }

        Node newNode = new Node(val);
        newNode.prev = pred;
        newNode.next = succ;
        pred.next = newNode;
        succ.prev = newNode;

        size++;
    }

    public void deleteAtIndex(int index) {
        if (index < 0 || index >= size) return;

        Node toDelete;
        if (index < size / 2) {
            toDelete = head.next;
            for (int i = 0; i < index; i++) toDelete = toDelete.next;
        } else {
            toDelete = tail.prev;
            for (int i = size - 1; i > index; i--) toDelete = toDelete.prev;
        }

        toDelete.prev.next = toDelete.next;
        toDelete.next.prev = toDelete.prev;

        size--;
    }
}
